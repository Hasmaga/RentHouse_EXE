// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentHouse_EXE.RentHouseDatabaseContext;

#nullable disable

namespace RentHouse_EXE.Migrations
{
    [DbContext(typeof(RentHouseDbContext))]
    [Migration("20240223031746_V1.94")]
    partial class V194
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RentHouse_EXE.Model.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PasswordSalt");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhoneNumber");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleId");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StatusId");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.Property<decimal>("Wallet")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("Wallet");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.ToTable("Account", "dbo");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.CommentRealEstate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountCommentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountCommentId");

                    b.Property<Guid?>("AdminCommentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AdminCommentId");

                    b.Property<string>("ContentCommon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContentCommon");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<Guid>("PostRealEstateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PostRealEstateId");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StatusId");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("AccountCommentId");

                    b.HasIndex("AdminCommentId");

                    b.HasIndex("PostRealEstateId");

                    b.HasIndex("StatusId");

                    b.ToTable("CommentRealEstate", "dbo");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.Furniture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.ToTable("Furniture", "dbo");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.ImageRealEstate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("Image");

                    b.Property<Guid>("PostRealEstateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PostRealEstateId");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StatusId");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("PostRealEstateId");

                    b.HasIndex("StatusId");

                    b.ToTable("ImageRealEstate", "dbo");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.LikeComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountLikeCommentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountLikeCommentId");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CommentId");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<Guid?>("ReplyCommentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ReplyCommentId");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("AccountLikeCommentId");

                    b.HasIndex("CommentId");

                    b.HasIndex("ReplyCommentId");

                    b.ToTable("LikeComment", "dbo");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<Guid>("CustomerReceiveId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CustomerReceiveId");

                    b.Property<Guid>("CustomerSendId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CustomerSendId");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("Status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("CustomerReceiveId");

                    b.HasIndex("CustomerSendId");

                    b.ToTable("Message", "dbo");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.ToTable("Plan", "dbo");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.PlanDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<int>("Day")
                        .HasColumnType("int")
                        .HasColumnName("Day");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.ToTable("PlanDay", "dbo");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.PlanPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PlanId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("Price");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanPrice", "dbo");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.PostRealEstate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address");

                    b.Property<Guid?>("AdminPostId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AdminPostId");

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Area");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("City");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContactEmail");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContactName");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<Guid>("CustomerPostId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CustomerPostId");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("District");

                    b.Property<Guid>("FurnitureId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Furniture");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Phone");

                    b.Property<Guid>("PlanDayId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PlanDayId");

                    b.Property<Guid>("PlanPriceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PlanPriceId");

                    b.Property<DateOnly>("PostDate")
                        .HasColumnType("date")
                        .HasColumnName("PostDate");

                    b.Property<TimeOnly>("PostTime")
                        .HasColumnType("time")
                        .HasColumnName("PostTime");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("Price");

                    b.Property<Guid>("PriceUnitId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PriceUnit");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StatusId");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Street");

                    b.Property<int>("TotalBathRoom")
                        .HasColumnType("int")
                        .HasColumnName("TotalBathRoom");

                    b.Property<int>("TotalBedRoom")
                        .HasColumnType("int")
                        .HasColumnName("TotalBedRoom");

                    b.Property<int>("TotalFloor")
                        .HasColumnType("int")
                        .HasColumnName("TotalFloor");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("TotalPrice");

                    b.Property<int>("TotalRoom")
                        .HasColumnType("int")
                        .HasColumnName("TotalRoom");

                    b.Property<Guid>("TypeRealEstateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TypeRealEstateId");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Ward");

                    b.HasKey("Id");

                    b.HasIndex("AdminPostId");

                    b.HasIndex("CustomerPostId");

                    b.HasIndex("FurnitureId");

                    b.HasIndex("PlanDayId");

                    b.HasIndex("PlanPriceId");

                    b.HasIndex("PriceUnitId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeRealEstateId");

                    b.ToTable("PostRealEstate", "dbo");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.PriceDecreases", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<decimal>("PercentageDecrease")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("PercentageDecrease");

                    b.Property<Guid>("PlanDayId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PlanDayId");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("PlanDayId");

                    b.ToTable("PriceDecreases", "dbo");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.PriceUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.ToTable("PriceUnit", "dbo");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.Provinces.Administrative_regions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code_name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("code_name");

                    b.Property<string>("Code_name_en")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("code_name_en");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Name_en")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name_en");

                    b.HasKey("Id");

                    b.ToTable("administrative_regions", "dbo");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.Provinces.Administrative_units", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code_name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("code_name");

                    b.Property<string>("Code_name_en")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("code_name_en");

                    b.Property<string>("Full_name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("Full_name_en")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name_en");

                    b.Property<string>("Short_name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("short_name");

                    b.Property<string>("Short_name_en")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("short_name_en");

                    b.HasKey("Id");

                    b.ToTable("administrative_units", "dbo");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.Provinces.Districts", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("code");

                    b.Property<int?>("Administrative_unit_id")
                        .HasColumnType("int")
                        .HasColumnName("administrative_unit_id");

                    b.Property<string>("Code_name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("code_name");

                    b.Property<string>("Full_name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("Full_name_en")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name_en");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Name_en")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name_en");

                    b.Property<string>("Province_code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("province_code");

                    b.HasKey("Code");

                    b.HasIndex("Administrative_unit_id");

                    b.HasIndex("Province_code");

                    b.ToTable("districts", "dbo");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.Provinces.Provinces", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("code");

                    b.Property<int?>("Administrative_region_id")
                        .HasColumnType("int")
                        .HasColumnName("administrative_region_id");

                    b.Property<int?>("Administrative_unit_id")
                        .HasColumnType("int")
                        .HasColumnName("administrative_unit_id");

                    b.Property<string>("Code_name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("code_name");

                    b.Property<string>("Full_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("Full_name_en")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name_en");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Name_en")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name_en");

                    b.HasKey("Code");

                    b.HasIndex("Administrative_region_id");

                    b.HasIndex("Administrative_unit_id");

                    b.ToTable("provinces", "dbo");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.Provinces.Wards", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("code");

                    b.Property<int?>("Administrative_unit_id")
                        .HasColumnType("int")
                        .HasColumnName("administrative_unit_id");

                    b.Property<string>("Code_name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("code_name");

                    b.Property<string>("District_code")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("district_code");

                    b.Property<string>("Full_name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("full_name");

                    b.Property<string>("Full_name_en")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("full_name_en");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Name_en")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name_en");

                    b.HasKey("Code");

                    b.HasIndex("Administrative_unit_id");

                    b.HasIndex("District_code");

                    b.ToTable("wards", "dbo");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.ReplyComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountReplyCommentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountReplyCommentId");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CommentId");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<Guid?>("ParentReplyCommentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ParentReplyCommentId");

                    b.Property<string>("ReplyCommentContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ReplyCommentContent");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StatusId");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("AccountReplyCommentId");

                    b.HasIndex("ParentReplyCommentId");

                    b.HasIndex("StatusId");

                    b.ToTable("ReplyComment", "dbo");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RoleName");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.ToTable("Role", "dbo");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StatusName");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.ToTable("Status", "dbo");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.TypeRealEstate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.ToTable("TypeRealEstate", "dbo");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.Account", b =>
                {
                    b.HasOne("RentHouse_EXE.Model.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RentHouse_EXE.Model.Status", "Status")
                        .WithMany("Accounts")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.CommentRealEstate", b =>
                {
                    b.HasOne("RentHouse_EXE.Model.Account", "AdminComment")
                        .WithMany("AdminComments")
                        .HasForeignKey("AccountCommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RentHouse_EXE.Model.Account", "AccountComment")
                        .WithMany("AccountComments")
                        .HasForeignKey("AdminCommentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RentHouse_EXE.Model.PostRealEstate", "PostRealEstate")
                        .WithMany("CommentRealEstates")
                        .HasForeignKey("PostRealEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentHouse_EXE.Model.Status", "Status")
                        .WithMany("CommentRealEstates")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AccountComment");

                    b.Navigation("AdminComment");

                    b.Navigation("PostRealEstate");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.ImageRealEstate", b =>
                {
                    b.HasOne("RentHouse_EXE.Model.PostRealEstate", "PostRealEstate")
                        .WithMany("ImageRealEstates")
                        .HasForeignKey("PostRealEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentHouse_EXE.Model.Status", "Status")
                        .WithMany("ImageRealEstates")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PostRealEstate");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.LikeComment", b =>
                {
                    b.HasOne("RentHouse_EXE.Model.Account", "AccountLikeComment")
                        .WithMany("AccountLikeComment")
                        .HasForeignKey("AccountLikeCommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RentHouse_EXE.Model.CommentRealEstate", "CommentRealEstate")
                        .WithMany("LikeComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RentHouse_EXE.Model.ReplyComment", "ReplyComment")
                        .WithMany("LikeComments")
                        .HasForeignKey("ReplyCommentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AccountLikeComment");

                    b.Navigation("CommentRealEstate");

                    b.Navigation("ReplyComment");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.Message", b =>
                {
                    b.HasOne("RentHouse_EXE.Model.Account", "CustomerReceive")
                        .WithMany("CustomerReceives")
                        .HasForeignKey("CustomerReceiveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RentHouse_EXE.Model.Account", "CustomerSend")
                        .WithMany("CustomerSends")
                        .HasForeignKey("CustomerSendId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CustomerReceive");

                    b.Navigation("CustomerSend");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.PlanPrice", b =>
                {
                    b.HasOne("RentHouse_EXE.Model.Plan", "Plans")
                        .WithMany("PlanPrices")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plans");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.PostRealEstate", b =>
                {
                    b.HasOne("RentHouse_EXE.Model.Account", "AdminPosts")
                        .WithMany("AdminPosts")
                        .HasForeignKey("AdminPostId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RentHouse_EXE.Model.Account", "CustomerPosts")
                        .WithMany("CustomerPosts")
                        .HasForeignKey("CustomerPostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RentHouse_EXE.Model.Furniture", "Furnitures")
                        .WithMany("PostRealEstates")
                        .HasForeignKey("FurnitureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentHouse_EXE.Model.PlanDay", "PlanDay")
                        .WithMany()
                        .HasForeignKey("PlanDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentHouse_EXE.Model.PlanPrice", "PlanPrice")
                        .WithMany("PostRealEstates")
                        .HasForeignKey("PlanPriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentHouse_EXE.Model.PriceUnit", "PriceUnits")
                        .WithMany("PostRealEstates")
                        .HasForeignKey("PriceUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentHouse_EXE.Model.Status", "Statuses")
                        .WithMany("PostRealEstates")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RentHouse_EXE.Model.TypeRealEstate", "TypeRealEstates")
                        .WithMany("PostRealEstates")
                        .HasForeignKey("TypeRealEstateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdminPosts");

                    b.Navigation("CustomerPosts");

                    b.Navigation("Furnitures");

                    b.Navigation("PlanDay");

                    b.Navigation("PlanPrice");

                    b.Navigation("PriceUnits");

                    b.Navigation("Statuses");

                    b.Navigation("TypeRealEstates");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.PriceDecreases", b =>
                {
                    b.HasOne("RentHouse_EXE.Model.PlanDay", "PlanDays")
                        .WithMany("PriceDecreaseses")
                        .HasForeignKey("PlanDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanDays");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.Provinces.Districts", b =>
                {
                    b.HasOne("RentHouse_EXE.Model.Provinces.Administrative_units", "Administrative_units")
                        .WithMany("Districts")
                        .HasForeignKey("Administrative_unit_id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RentHouse_EXE.Model.Provinces.Provinces", "Provinces")
                        .WithMany("Districts")
                        .HasForeignKey("Province_code")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Administrative_units");

                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.Provinces.Provinces", b =>
                {
                    b.HasOne("RentHouse_EXE.Model.Provinces.Administrative_regions", "Administrative_regions")
                        .WithMany("Provinces")
                        .HasForeignKey("Administrative_region_id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RentHouse_EXE.Model.Provinces.Administrative_units", "Administrative_units")
                        .WithMany("Provinces")
                        .HasForeignKey("Administrative_unit_id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Administrative_regions");

                    b.Navigation("Administrative_units");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.Provinces.Wards", b =>
                {
                    b.HasOne("RentHouse_EXE.Model.Provinces.Administrative_units", "Administrative_units")
                        .WithMany("Wards")
                        .HasForeignKey("Administrative_unit_id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RentHouse_EXE.Model.Provinces.Districts", "Districts")
                        .WithMany("Wards")
                        .HasForeignKey("District_code")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Administrative_units");

                    b.Navigation("Districts");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.ReplyComment", b =>
                {
                    b.HasOne("RentHouse_EXE.Model.Account", "AccountReplyComment")
                        .WithMany("AccountReplyComments")
                        .HasForeignKey("AccountReplyCommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RentHouse_EXE.Model.CommentRealEstate", "CommentRealEstate")
                        .WithMany("ReplyComments")
                        .HasForeignKey("ParentReplyCommentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RentHouse_EXE.Model.ReplyComment", "ParentReplyComment")
                        .WithMany("ReplyComments")
                        .HasForeignKey("ParentReplyCommentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RentHouse_EXE.Model.Status", "Status")
                        .WithMany("ReplyComments")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountReplyComment");

                    b.Navigation("CommentRealEstate");

                    b.Navigation("ParentReplyComment");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.Account", b =>
                {
                    b.Navigation("AccountComments");

                    b.Navigation("AccountLikeComment");

                    b.Navigation("AccountReplyComments");

                    b.Navigation("AdminComments");

                    b.Navigation("AdminPosts");

                    b.Navigation("CustomerPosts");

                    b.Navigation("CustomerReceives");

                    b.Navigation("CustomerSends");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.CommentRealEstate", b =>
                {
                    b.Navigation("LikeComments");

                    b.Navigation("ReplyComments");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.Furniture", b =>
                {
                    b.Navigation("PostRealEstates");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.Plan", b =>
                {
                    b.Navigation("PlanPrices");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.PlanDay", b =>
                {
                    b.Navigation("PriceDecreaseses");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.PlanPrice", b =>
                {
                    b.Navigation("PostRealEstates");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.PostRealEstate", b =>
                {
                    b.Navigation("CommentRealEstates");

                    b.Navigation("ImageRealEstates");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.PriceUnit", b =>
                {
                    b.Navigation("PostRealEstates");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.Provinces.Administrative_regions", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.Provinces.Administrative_units", b =>
                {
                    b.Navigation("Districts");

                    b.Navigation("Provinces");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.Provinces.Districts", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.Provinces.Provinces", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.ReplyComment", b =>
                {
                    b.Navigation("LikeComments");

                    b.Navigation("ReplyComments");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.Status", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("CommentRealEstates");

                    b.Navigation("ImageRealEstates");

                    b.Navigation("PostRealEstates");

                    b.Navigation("ReplyComments");
                });

            modelBuilder.Entity("RentHouse_EXE.Model.TypeRealEstate", b =>
                {
                    b.Navigation("PostRealEstates");
                });
#pragma warning restore 612, 618
        }
    }
}
